1. Установка, настройка ufw (Uncomplicated Firewall)
    sudo apt install ufw
Список доступных предустановок приложений
    sudo ufw app list
Разрешение подключений по SSH
    #22 порт
        sudo ufw allow SSH
        или
        sudo ufw allow 22
    #22 порт, но только TCP/IP
        sudo ufw allow 22/tcp
    #!настраиваем SSH на соответствующий порт по TCP/IP
        sudo ufw allow 33322/tcp
Проверка состояния ufw
    sudo ufw status
Более подробная информация
    sudo ufw status verbose
Активация ufw (предванительно разрешить SSH!)
    sudo ufw enable
Удаление правил по номеру правила
    sudo ufw status numbered
    #если хотим удалить правило номер 2
    sudo ufw delete 2
Отключение ufw
    sudo ufw disable
Сброс настроек до состояния по умолчанию
    sudo ufw reset

2. Установка nginx
    sudo apt update
    sudo apt install nginx
Настройка ufw
Проверка списка доступных предустановок приложений
    sudo ufw app list
    Available applications:
    ...
      Nginx Full
      Nginx HTTP
      Nginx HTTPS
    ...
Разрешаем nginx
    sudo ufw allow 'Nginx Full'
Проверяем статус
    sudo ufw status
        Status: active
        To                         Action      From
        --                         ------      ----
        Nginx Full                 ALLOW       Anywhere
        Nginx Full (v6)            ALLOW       Anywhere (v6)
***
Если nginx отсутствует, то:
Создаём и открываем файл nginx.ini
    sudo vim /etc/ufw/applications.d/nginx.ini
Вставляем следующий сниппет:
    [Nginx HTTP]
    title=Web Server
    description=Enable NGINX HTTP traffic
    ports=80/tcp

    [Nginx HTTPS] \
    title=Web Server (HTTPS) \
    description=Enable NGINX HTTPS traffic
    ports=443/tcp

    [Nginx Full]
    title=Web Server (HTTP,HTTPS)
    description=Enable NGINX HTTP and HTTPS traffic
    ports=80,443/tcp
***
Проверяем статус веб-сервера
    systemctl status nginx
Управление веб-сервером
    sudo systemctl stop nginx
    sudo systemctl start nginx
    sudo systemctl restart nginx #остановка и запуск
    #перезагрузка без сброса соединений (использовать, если внесли изменения в конфигурацию)
        sudo systemctl reload nginx
    #по умолчанию nginx запускается при загрузке включении/перезагрузки сервера, если не надо, то:
        sudo systemctl disable nginx
    #чтобы вернуть автозагрузку
        sudo systemctl enable nginx
Настройка блоков веб-сервера
Для каждого сайта/домена создаём директорию
    sudo mkdir -p /var/www/<your_domain>/html
Передадим права на папку текущему пользователю
    sudo chown -R $USER:$USER /var/www/<your_domain>/html
    sudo chmod -R 755 /var/www/<your_domain>
Теперь в папку html можно добавить index.html-файл
Сделаем отдельную конфигурацию nginx для этого сайта
    sudo vim /etc/nginx/sites-available/<your_domain>.conf
    Вставить:
        server {
            listen 80;
            listen [::]:80;

            root /var/www/<your_domain>/html;
            index index.html index.htm index.nginx-debian.html;

            server_name <your_domain> www.<your_domain>;

            location / {
                    try_files $uri $uri/ =404;
            }
        }
Во избежание "hash bucket memory problem" в файле
    sudo vim /etc/nginx/nginx.conf
    раскомментируем настройку
    #server_names_hash_bucket_size
Протестируем конфиг
    sudo nginx -t
Делаем ссылку на данный конфиг в "sites-enabled", тестируем, перезагружаем nginx
    sudo ln -s /etc/nginx/sites-available/<your_domain>.conf /etc/nginx/sites-enabled/
    sudo nginx -t
    sudo systemctl reload nginx
Проверим, что возвращает сервер на запрос <your_domain>
    #симуляция запроса с браузера
    curl <your_domain>

3. Устанавливаем сertbot
    sudo apt update
    sudo apt install python3-acme python3-certbot python3-mock python3-openssl python3-pkg-resources python3-pyparsing python3-zope.interface
    sudo apt install python3-certbot-nginx
