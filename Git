Загружаем и устанавливаем Git
    	https://git-scm.com/downloads

>>>ИСПОЛЬЗОВАНИЕ GIT<<<

1. Вводим в терминале (подписи к действиям на git):
	~$ git config --global user.name "Name Surname"
	~$ git config --global user.email "user@gmail.com"
2. Проверить настройки:
	~$ git config -l
	Файл настроек находится в домашней директории:
	~$ .gitconfig
3. Для того, чтобы git начал отслеживать изменения в директории, создаём базу данных git:
	~$ mkdir myproject
	~$ cd myproject
	~$ git init . — инициализиция git в данной директории (точка — то же самое, что и /home/user/myproject/)
	~$ git init git_stady — инициализация git в папке git_stady

*****Теперь директория myproject отслеживается git*****

4. Чтобы понять, что сейчас происходит в отслеживаемой директории:
	~$ git status
	Если добавить новые файлы в отслеживаемую директорию и вызвать git status, то git выведет сообщение о том, что есть неотслеживаемые файлы.

5. Если состояние директории нас устраивает, с учётом добавленных или изменённых файлов, то нужно сделать «снимок» состояния директории:
	~$ git add * — звёздочка или точка, говорит о том, что мы добавляем в снимок все файлы директории
	или
	~$ git add file1.txt — если мы хотим закоммитить только файл 1.

6. Добавляем снимок директории (подготовленные (staging) файлы) в базу данных git:
	~$ git commit -m «My Initial commit, this is Version1.0» — всегда добаляем message -m «Комментарий»

*****Снимок директории сделан*****

7. Стадии отслеживания git
    №   Действие с файлом/папкой            Стадия отслеживания
    --------------------------------------------------------------
    1   echo «HelloGit» > file.txt      Untracked
    2   git add file.txt                Staged
    3   git commit -m «Vercion1.0»      Copy in Local Repository
    4   git push                        Copy in Remote Repository

8. Отображение commits:
	~$ git log — всех
	~$ git log -1 — последнего
	~$ git log -1 -p — отображение подробной информации об изменении

9. Отмена изменений:
	~$ git checkout — file1.txt

10. Отображение разницы между staged и последним commit (то, что в последствии будет отражено по команде git log (используется не часто):
	~$ git diff --staged

11. Чтобы git не реагировал на какие либо файлы/папки — создать в директории файл .gitignore и добавить в него необходимые файлы/папки:
	file.log
	*.log
	logs/
	file1.txt

*****Github*****

12. Кликаем по котику → создаём новую папку → переходим в неё → кнопка «Code» (раньше «Clone or download»):
	- можно скачать zip-архив
	- можно ссылку https
	- можно ссылку ssh

13. HTTPS. В заранее определённой папке на компьютере:
	~$ git clone https://github.com/user/mysuperproject1.git — https-ссылка
	В папку на компьютере скачается и синхронизируется папка из github

14. SSH:
	Windows
	если ключи есть:
	- создаём папку: /c/Users/User/.ssh/ и копируем в нёё ключи
	если ключей нет:
	- в Git Bash генерируем ключи:
		ssh-keygen
	- данная команда создаст папку /c/Users/User/.ssh/ и сохранит в ней ключи
	далее - Linux, Windows
	- открываем публичный ключ в блокноте и копируем содержимое
	- на сайте → settings → SSH and GPG keys → New ssh key → добавляем публичный ключ
	- для перехода с HTTPS на SSH либо удаляем старую папку и новую качаем с помощью ssh, либо:
	- git remote -v — посмотреть какая ссылка установлена
	- git remote set-url origin git@github.com:user/mysuperproject1.git — замена на ssh-ссылку
	~$ git clone git@github.com:user/mysuperproject1.git — ssh-ссылка
	В папку на компьютере скачается и синхронизируется папка из github

15. Поработав в папке:
	~$ git push origin — отправить изменения на github

*****Ветвления*****

Золотое правило: commits не делаются в master-branch (золотая копия)! Возможен только первый 	initial commit.

16. Master (золотая копия) → v1 → v2 → v3 (имеется 3 варианта золотой копии), далее решили внести изменения:
16.1. fix_error (branch) → v1 → v2 → v3 (копия master branch) → поработали → получили на выходе v4 → делаем запрос на marge с
      master brabch → v4 присоединяется к master branch → fix error branch можно удалять.

17. Создание, просмотр ветвей (branches), переключение между ветвями и их удаление:
	~$ git branch fix_er — создаст ветвь fix_er.
	~$ git branch — отобразит ветви и ветвь, на которой мы находимся.
	~$ git checkout fix_error - перейти на ветвь fix_error.
	~$ git branch -d fix_error — удалить ветвь fix_error (предварительно перейти на другую ветвь.
	~$ git branch -D fix_error — удалить, если есть коммиты и нет объединений (просто -d вызовет ошибку).
	~$ git checkout -b fix_error — создать и сразу перейти на ветвь fix_error.

18. Объединение ветвей с master-branch:
	~$ git checkout master — перейди на master-branch
	~$ git merge fix_error — объединение master-branch c fix_error.

*****Возврат к предыдущим версиям*****

19. Проверяем наличие коммитов:
	~$ git log — у каждого коммита есть хеш-номер (c23423b2342….)

20. Переходим на коммит с соответствующим хеш-номером и возвращаемся обратно:
	~$ git checkout хеш-номер
	~$ git checkout master — возвращаемся обратно.

*****Изменить последний коммит*****

21. После внесения изменений в файл(ы) вводим команду:
	~$ git commit --amend — автоматически перейдём в Vi для правки коммита. Правим название, сохраняем, выходим.
	Т.о. мы внесли изменения не делая новых коммитов.

*****Вернуться на несколько коммитов назад, удалив все последующие версии*****

22. Вернуться на одну/несколько версию(й) назад:
	~$ git reset --hard HEAD~ — тильда вернёт на 1 коммит назад.
	~$ git reset --hard HEAD~2 — вернёт на 1 коммита назад.

*****Удалить ненужные коммиты*****

23. Удаляем из лога ненужные коммиты, не изменяя файлы в папке:
	~$ git reset --soft HEAD~3 — удалит 3 последние коммита из лога, при этом файлы останутся нетронутыми.

*****Рабочий цикл Git ↔ GitHub*****

    №						Действия
    -----------------------------------------------------------------------------------------------
    1   Перешли на GitHub, выбрали папку для работы, скопировали ссылку (ssh или https)
    -----------------------------------------------------------------------------------------------
    2	На рабочем компьютере сделали git clone данной папки
    -----------------------------------------------------------------------------------------------
    3	Переходим в данную папку и создаём новую ветку (master-branch не редактируем!):
	git checkout -b timur_works — работаем в данной ветке, мастер не трогаем.
    -----------------------------------------------------------------------------------------------
    4	git add * → git commit -m «Add few changes» — внесли изменения в новой ветке
    -----------------------------------------------------------------------------------------------
    5	git push origin — отправляем свою ветку на github, при этом git выдаст ошибку, что
    	на удалённом сервере отсутствует ветка timur_works, соответственно вводим команду:
	git push --set-upstream origin timur_works — наша ветка появится на github.
    -----------------------------------------------------------------------------------------------
    6	Просим, чтобы сделали merge, на github — pull request. Переходим на github и
    	нажимаем на кнопку Compare & Pull request → Пишем комментарий → Create pull request.
    -----------------------------------------------------------------------------------------------
    7	Код проходит проверку и после этого — Merge pull request. На данном шаге удобно посмотреть
    	изменения: во вкладке Pull request вкладка file changed → кнопка Diff settengs → Split.
	Далее можно данную ссылку направить проверяющему.
    -----------------------------------------------------------------------------------------------
    8	Удаляем уже ненужную ветвь:
	git checkout master
	git branch -d timur_works — удаляем ветвь локально
	git push origin --delete timur_works — удаляем ветку с github
    -----------------------------------------------------------------------------------------------

*****WebStorm*****

В настройках WebStorm указываем путь к исполняемому файлу
    Vercion Control > Git > Path to Git executable:
        C:\Program Files\Git\bin\git.exe
За контроль версий отвечает вкладка VCS
Выбираем необходимую папку
    VCS > Import into Version Control > Create Git Repository
    создана ветка master
В левом нижнем углу WS указана активная ветка
Создаём .gitignore-файл
Добавить исключения в gitignore можно по ПКМ
Управление commit push pull в правом верхнем углу
Боковая вкладка commit слева в верхней половине
Во вкладке commit есть checkbox "Amend" - сделать не новый коммин, а объединиться с предыдущим.
***GitHub
На GitHub-е в правом верхнем углу "плюсик" > "New repository"
В WebStorm > VCS > Git > Remotes > "плюсик" > подключаем репозиторий
