*****Стартуем проект*****

django-admin - отобразит список возомжных команд.
django-admin startproject <название проекта> - стартовать проект (не использовать в названии "site").
    В результате будут созданы:
    - файл manage.py - спец. файл утилиты, используемый для различных действий с проектом (создание файлов, миграций и пр.). Вызывает утилиту django-admin и передаёт ей введённую команду.
    - папка проекта mysite с подпапкой mysite (пакет конфигурации) в которой сформирован пакет python с модулями проекта, задающими  конфигурацию проекта. __init__.py - наличие пустого файла __init__.py говорит о том, что это пакет python.
    - asgi, wsgi - модули, связывающие проект с веб-сервером.
    - settings.py - модуль с настройками проекта.
    - urls.py - модуль с маршрутами проекта (маршруты для маршрутизатора).

*****Создано пустое приложение*****
*****Проверка работоспособности приложения*****

Запуск отладочного сервера. Вместо django-admin можем использовать mange.py:
    - в папке с файлом manage.py запускаем: python manage.py runserver - запускается отладочный веб-сервер, поставляемый с django.
    - python manage.py runserver 4000 - запуск сервера на 4000 порту.
    - python manage.py runserver 1.2.3.4:4000 - запуск сервера по указанному адресу.
    - после старта сервера в папке появится файл базы данных - db.sqlite3

*****Создание приложения новостного сайта*****

python manage.py startapp news - создаётся папка (пакет) news. Содержание папки:
    - admin.py - файл модуля настройки админки.
    - apps.py - модуль настройки приложения.
    - models.py - файл, в котором будут храниться модели приложения.
    - tests.py - модуль с тестирующими процедурами.
    - views.py - виды (контроллеры) приложения.
После создания приложения его нужно зарегистрировать в модуле настройки проекта:
    а) переходим в папку mysite -> файл settings.py
    б) ищем настройку INSTALLED_APPS -> добавляем в список:
        - либо 'news',
        - либо, что предпочтительнее, обратимся к классу 'news.apps.NewsConfig' (в папке news -> файл apps.py -> класс NewsConfig)

*****Архитектура MVC (MTV)*****

MVC = MTV (в django):
    - Model = Model - отвечает за работу с данными (получение, хранение)
    - View = Tamplates - отвечает за представление данных (красивое отображение)
    - Controller = View - связующее звено, принимает запрос от пользователя, вызывает нужную модель и подключает нужный вид.

*****Controllers/Views*****













