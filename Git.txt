>>>>Введение<<<<

    Git - система контроля версий (файлов). Что-то вроде возможности сохраняться в компьютерных играх (в Git эквивалент игрового сохранения - коммит).
Важно: добавление файлов к "сохранению" двухступенчатое: сначала добавляем файл в индекс (git add), потом "сохраняем" (git commit).
    Отслеживаемые файлы могут быть в 3-х состояниях: неизменённые, изменённые, проиндексированные (готовые к коммиту).

Загружаем и устанавливаем Git
    https://git-scm.com/downloads

>>>>Использование Git<<<<

1. Вводим в терминале (подписи к действиям на git):
    ~$ git config --global user.name "Name Surname"
    ~$ git config --global user.email "user@gmail.com"
    Для Windows включить преобразование окончаний строк из CRLF в LF:
    ~$ git config --global core.autocrlf true
2. Проверить настройки:
    ~$ git config -l
    Файл настроек находится в домашней директории:
    ~$ .gitconfig
3. Для того, чтобы git начал отслеживать изменения в директории, создаём базу данных git:
    ~$ mkdir myproject
    ~$ cd myproject
    ~$ git init . - инициализиция git в данной директории (точка - то же самое, что и /home/user/myproject/)
    ~$ git init git_stady - инициализация git в папке git_stady

****Теперь директория myproject отслеживается git****

4. Информация о состоянии отслеживаемой директории:
    ~$ git status

5. Если состояние директории нас устраивает, с учётом добавленных или изменённых файлов, то нужно сделать "снимок" состояния директории:
    Добавление изменений в индекс
    ~$ git add . - точка, говорит о том, что мы добавляем в снимок все файлы директории
    или
    ~$ git add file1.txt - если мы хотим закоммитить только файл file1.txt
    Удаление изменений из индекса
    ~$ git reset - убрать из индекса все добавленные в него изменения (антипод git add)
    ~$ git reset readme.txt - убрать из индекса изменения указанного файла

6. Добавляем снимок директории (подготовленные (staging) файлы) в базу данных git:
    ~$ git commit -m "My Initial commit, this is Version1.0" - всегда добаляем message -m "Комментарий"
    Записи git add и git commit -m "..." можно сократить:
    ~$ git commit -am "..." - данная запись одновременно проиндексирует, добавленные ранее в индекс файлы, и закоммитит их.

****Снимок директории сделан****

7. Стадии отслеживания git
    № |  Действие с файлом/папкой  |     Стадия отслеживания
    -------------------------------------------------------------
    1 | echo "HelloGit" > file.txt | Untracked
    2 | git add file.txt           | Staged
    3 | git commit -m "Vercion1.0" | Copy in Local Repository
    4 | git push                   | Copy in Remote Repository

8. Отображение commits:
    ~$ git log - всех
    ~$ git log -1 - последнего
    ~$ git log -1 -p - отображение подробной информации об изменении (минус 1, -p - print)

9. Отмена изменений:
    Команда вернёт предыдущее состояние file1.txt
    ~$ git checkout -- file1.txt 

10. Отображение разницы между staged и последним commit (то, что в последствии будет отражено по команде git log (используется не часто)):
    ~$ git diff --staged

11. Чтобы git не реагировал на какие либо файлы/папки - создать в директории файл .gitignore и добавить в него необходимые файлы/папки:
    file.log
    *.log
    logs/
    file1.txt

****GitHub. Клонирование репозитория. Подключение к удалённому репозиторию****

12. Кликаем по котику → создаём новую папку → переходим в неё → кнопка "Code" (раньше "Clone or download"):
    - можно скачать zip-архив
    - можно ссылку https
    - можно ссылку ssh

13. HTTPS. В заранее определённой папке на компьютере:
    ~$ git clone https://github.com/user/mysuperproject1.git - скачается папка (репозиторий) из GitHub
    Если скачать нужно не папку, а содержимое папки, то указываем точку после ссылки https:
    ~$ git clone https://github.com/user/mysuperproject1.git .
    Если клонируемый репозиторий необходимую скачать в определённую папку, то указываем папку после ссылки https:
    ~$ git clone https://github.com/user/mysuperproject1.git folderName

14. SSH:
    В Win10 делаем, как указано ниже (просто ssh-keygen), без доп. настроек и переименований,
    так делать не надо: ssh-keygen -t rsa -b 4096 -f id_rsa (так из-под Linux).
    - в терминале (Git Bash или MobaXterm) выполнить команду ssh-keygen.
    - в домашней директории (для W10 - это "c:\Users\<Имя пользователя>\") будет создана папка
    .ssh с двумя ключами (приватный и публичный).
    - открываем публичный ключ в блокноте и копируем содержимое
    - на сайте → settings → SSH and GPG keys → New ssh key → добавляем публичный ключ
    - для перехода с HTTPS на SSH либо удаляем старую папку и новую качаем с помощью ssh, либо:
    - git remote -v - посмотреть какая ссылка установлена
    - git remote set-url origin git@github.com:user/mysuperproject1.git - замена на ssh-ссылку
    В заранее определённой папке на компьютере:
    ~$ git clone git@github.com:user/mysuperproject1.git - скачается папка (репозиторий) из GitHub
    Если скачать нужно не папку, а содержимое папки, то указываем точку после ссылки https:
    ~$ git clone git@github.com:user/mysuperproject1.git .
    Если клонируемый репозиторий необходимую скачать в определённую папку, то указываем папку после ссылки https:
    ~$ git clone git@github.com:user/mysuperproject1.git folderName

15. Поработав в папке:
    ~$ git push origin - отправить изменения на github

16. Альтернатива git clone. Подключаемся к удалённому репозиторию.
    - создаём локальный репозиторий пп 1-6
    - создаём удалённый репозиторий (например на GitHub)
    - добавляем удалённый репозиторий по шаблону "git remote add [сокращенное имя] [url]":
    ~$ git remote add origin git@github.com:user/mysuperproject1.git - теперь вместо URL можно вводить origin
    [необязательно: ~$ git fetch origin - плучаем данные с удалённого репозитория, но они добавятся в папку ".git"]
    - загружаем из удалённого репозитория ветку master:
    ~$ git pull origin master

****Ветвления****

Золотое правило: commits не делаются в master-branch (золотая копия)! Возможен только первый     initial commit.

17. Master (золотая копия) → v1 → v2 → v3 (имеется 3 варианта золотой копии), далее решили внести изменения:
17.1. fix_error (branch) → v1 → v2 → v3 (копия master branch) → поработали → получили на выходе v4 → делаем запрос на marge с
      master brabch → v4 присоединяется к master branch → fix error branch можно удалять.

18. Создание, просмотр ветвей (branches), переключение между ветвями и их удаление:
    ~$ git branch fix_er - создаст ветвь fix_er.
    ~$ git branch - отобразит ветви и ветвь, на которой мы находимся.
    ~$ git checkout fix_error - перейти на ветвь fix_error.
    ~$ git branch -d fix_error - удалить ветвь fix_error (предварительно перейти на другую ветвь).
    ~$ git branch -D fix_error - удалить, если есть коммиты и нет объединений (просто -d вызовет ошибку).
    ~$ git checkout -b fix_error - создать и сразу перейти на ветвь fix_error.

19. Объединение ветвей с master-branch:
    ~$ git checkout master - перейди на master-branch
    ~$ git merge fix_error - объединение master-branch c fix_error.

****Возврат к предыдущим версиям****

20. Проверяем наличие коммитов:
    ~$ git log - у каждого коммита есть хеш-номер (c23423b2342….)

21. Переходим на коммит с соответствующим хеш-номером и возвращаемся обратно:
    ~$ git checkout хеш-номер
    ~$ git checkout master - возвращаемся обратно.

****Изменить последний коммит, не делая нового****

22. После внесения изменений в файл(ы) вводим команду:
    ~$ git commit --amend - автоматически перейдём в Vi для правки коммита. Правим название, сохраняем, выходим.
    Т.о. мы внесли изменения, не делая новых коммитов.

****Вернуться на несколько коммитов назад, удалив все последующие версии****

23. Вернуться на одну/несколько версию(й) назад:
    ~$ git reset --hard HEAD~ - тильда вернёт на 1 коммит назад.
    ~$ git reset --hard HEAD~2 - вернёт на 2 коммита назад.

****Удалить ненужные коммиты****

24. Удаляем из лога ненужные коммиты, не изменяя файлы в папке:
    ~$ git reset --soft HEAD~3 - удалит 3 последние коммита из лога, при этом файлы останутся нетронутыми.

****Рабочий цикл Git ↔ GitHub****

    № |                                      Действия
    -----------------------------------------------------------------------------------------------
    1 | Перешли на GitHub, выбрали папку для работы, скопировали ссылку (ssh или https)
    -----------------------------------------------------------------------------------------------
    2 | На рабочем компьютере сделали git clone данной папки
    -----------------------------------------------------------------------------------------------
    3 | Переходим в данную папку и создаём новую ветку (master-branch не редактируем!):
      | git checkout -b timur_works - работаем в данной ветке, мастер не трогаем.
    -----------------------------------------------------------------------------------------------
    4 | git add . → git commit -m "Add few changes" - внесли изменения в новой ветке
    -----------------------------------------------------------------------------------------------
    5 | git push origin - отправляем свою ветку на github, при этом git выдаст ошибку, что
      | на удалённом сервере отсутствует ветка timur_works, соответственно вводим команду:
      | git push --set-upstream origin timur_works - наша ветка появится на github.
    -----------------------------------------------------------------------------------------------
    6 | Просим, чтобы сделали merge, на github - pull request. Переходим на github и
      | нажимаем на кнопку Compare & Pull request → Пишем комментарий → Create pull request.
    -----------------------------------------------------------------------------------------------
    7 | Код проходит проверку и после этого - Merge pull request. На данном шаге удобно посмотреть
      | изменения: во вкладке Pull request вкладка file changed → кнопка Diff settengs → Split.
      | Далее можно данную ссылку направить проверяющему.
    -----------------------------------------------------------------------------------------------
    8 | Удаляем уже ненужную ветвь:
      | git checkout master
      | git branch -d timur_works - удаляем ветвь локально
      | git push origin --delete timur_works - удаляем ветку с github
    -----------------------------------------------------------------------------------------------

>>>>WebStorm<<<<

1. Указываем путь к исполняемому файлу git.exe:
    Settings > Vercion Control > Git > Path to Git executable > C:\Program Files\Git\bin\git.exe

2. Добавляем учётную запись GitHub:
    Settings > Vercion Control > GitHub
    
3. Создать локальную папку и начать отслеживание изменений в ней (git init):
    Вкладка VCS > Import into Vercion Control > Create Git Repository > <путь к папке>
    Теперь данная папка будет локальным репозиторием со стандартной начальной веткой MASTER 
    Активная ветка указана в левом нижнем углу WS
    
4. Создать коммит
    Ctrl+K | Галочка в верхнем левом углу
    
5. Git push
5.1. 1-й вариант:
    - создали репозиторий на GitHub
    - подключились к нему
    - поработали в папке
    - git push
5.2. 2-й вариант:
    - у нас есть рабочий локальный репозиторий
    - поработав в данном репозитории, необходимо его отправить в удалённый репозиторий
    - Вкладка VCS > Import into Vercion Control > Share Project on GitHub
    
6. Работа с ветками в правом нижнем углу
    Важно сделать коммит перед переходом на другую ветку, т.к. информация будет утеряна

7. Логирование (история того, что происходило) - вкладка в нижнем левом углу
    - есть дерево коммитов, ответвлений с подробной информацией по каждому коммиту
    - с помощью данного дерева можно перемещаться между коммитами, чтобы вернуться в определённую
    точку сохранения
    - кликая по коммитам, справа будет показана подробная информация по каждому коммиту
    - если нужно перейти на определённое сохранение, то:
        - ПКМ по нужному коммиту и выбираем:
        - create patch - создать временную ветку, затем создать новую или объединить
        - new branch - создать ветку на основании данного коммита
    
8. Подключить удалённый репозиторий
    Создали удалённый репозиторий (например на GitHub), скопировали адрес (SSH | HTTPS)
    Вкладка VCS > Git > Remotes > добавить адрес удалённого репозитория